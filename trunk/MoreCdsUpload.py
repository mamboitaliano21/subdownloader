#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4.1 on Mon Nov 27 14:32:11 2006

import wx
import wx.grid as  gridlib
import globals
import os      

class MyDialogMoreCds(wx.Dialog):
    def __init__(self, parent, bool_insert_cd1=True,*args, **kwds):
	self.bool_insert_cd1 = bool_insert_cd1
	self.parent = parent
        # begin wxGlade: MyDialogMoreCds.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_2 = wx.Panel(self, -1)
        self.grid_multiupload = wx.grid.Grid(self.panel_2, -1, size=(1, 1))
        self.button_cancel = wx.Button(self.panel_2, -1, _("Cancel"))
        self.button_accept = wx.Button(self.panel_2, -1, _("Accept"))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialogMoreCds.__set_properties
        self.SetTitle(_("Upload More Subtitles"))
        self.grid_multiupload.CreateGrid(1, 1)
        self.grid_multiupload.EnableEditing(0)
        self.grid_multiupload.SetColLabelValue(0, _("File"))
        self.grid_multiupload.SetMinSize((392, 233))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialogMoreCds.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.grid_multiupload, 1, wx.EXPAND, 0)
        sizer_4.Add((20, 0), 1, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(self.button_cancel, 0, wx.RIGHT|wx.ADJUST_MINSIZE, 4)
        sizer_4.Add(self.button_accept, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        self.panel_2.SetAutoLayout(True)
        self.panel_2.SetSizer(sizer_2)
        sizer_2.Fit(self.panel_2)
        sizer_2.SetSizeHints(self.panel_2)
        sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        self.Layout()
        # end wxGlade
        
        self.grid_multiupload.CanDragColSize()
        self.grid_multiupload.Bind(gridlib.EVT_GRID_CELL_LEFT_CLICK, self.OnLeftClickCell)
	self.grid_multiupload.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnRightClickCell)
	self.Bind(wx.EVT_BUTTON,self.OnButtonAccept,self.button_accept)
	self.Bind(wx.EVT_BUTTON,self.OnButtonCancel,self.button_cancel)
        
        morecd_values = self.parent.morecd_values
        self.rowlabels = morecd_values["rowlabels"][:]
	self.actions = morecd_values["actions"][:]
	self.content_labels = morecd_values["content_labels"][:]
	self.files = morecd_values["files"][:]
	self.total_cds = morecd_values["total_cds"]
	
        self.grid_multiupload.DeleteRows()
        
	if not len(self.rowlabels) and self.bool_insert_cd1:
	    self.InsertNewCd()
	else:
	    self.grid_multiupload.AppendRows(len(self.rowlabels))
	    self.UpdateRows()

	self.grid_multiupload.SetColSize(0,300)
	self.grid_multiupload.SetRowLabelSize(90)
	self.grid_multiupload.SetRowLabelAlignment(wx.ALIGN_RIGHT, wx.ALIGN_CENTRE)
    
    def OnButtonCancel(self,evt):
	self.EndModal(wx.ID_CANCEL)
    def OnButtonAccept(self,evt):
	total_rows = self.grid_multiupload.GetNumberRows()
	
	subs_list = []
	avi_list = []
	for i in range(total_rows):
	    if self.actions[i] == "openvideo":
		avi_list.append(self.files[i])
	    elif self.actions[i] == "opensub":
		subs_list.append(self.files[i])
		    
	total_new_cds = self.total_cds - 2
	last_cd_good = -1
	for cd_count in range(total_new_cds):
	    if avi_list[cd_count] != "" or subs_list[cd_count] != "":
		last_cd_good = cd_count
		
	error_msg = ""
	for cd_count in range(last_cd_good+1):
	     if avi_list[cd_count] == "": 
		 error_msg += _("The file for AVI CD%d is required")% (cd_count + 3) + "\n"
	     if subs_list[cd_count] == "":
		 error_msg += _("The file for Sub CD%d is required")% (cd_count + 3) + "\n"
	
	if error_msg != "":
	    wx.MessageBox(error_msg)
	else:    
	    self.parent.moresubs_list = subs_list[:last_cd_good+1]
	    self.parent.moreavi_list = avi_list[:last_cd_good+1]
	    morecd_values = {}
	    morecd_values["rowlabels"] = self.rowlabels
	    morecd_values["actions"] = self.actions
	    morecd_values["content_labels"] = self.content_labels
	    morecd_values["files"] = self.files
	    morecd_values["total_cds"] = self.total_cds
	    self.parent.morecd_values = morecd_values
	
	    self.EndModal(wx.ID_OK)
	
	
    def UpdateRows(self):
	for num,rowlabel in enumerate(self.rowlabels):
	    self.grid_multiupload.SetCellAlignment(num,0,wx.ALIGN_RIGHT, wx.ALIGN_CENTRE)
	    if self.files[num] == "":
		self.grid_multiupload.SetCellValue(num,0,self.content_labels[num])
	    else:
		self.grid_multiupload.SetCellValue(num,0,self.files[num])
	    self.grid_multiupload.SetRowLabelValue(num,rowlabel)
	    
    def AutoCheckGridCds(self):
	total_rows = self.grid_multiupload.GetNumberRows()
	complete = True
	for i in range(total_rows):
	    if self.actions[i] != "" and self.files[i] == "":
                complete = False
		break
	    
	if complete:
	    self.InsertNewCd()
	    
    def InsertNewCd(self,videofile="",subfile=""):
	total_rows = self.grid_multiupload.GetNumberRows()
	self.total_cds += 1
	
	self.rowlabels.append(_("AVI File CD%d") % self.total_cds)
	self.actions.append("openvideo")
	if videofile:
	    self.content_labels.append(videofile)
	    self.files.append(videofile)
	else:
	    self.content_labels.append(_("Browse video..."))
	    self.files.append("")
	
	
	
	self.rowlabels.append("Subtitle CD"+ str(self.total_cds))
	self.actions.append("opensub")
	if subfile:
	    self.content_labels.append(subfile)
	    self.files.append(subfile)
	else:    
	    self.content_labels.append(_("Browse subtitle..."))
	    self.files.append("")
	
	
	self.rowlabels.append("...")
	self.content_labels.append("")
	self.files.append("")
	self.actions.append("")
	
	self.grid_multiupload.AppendRows(3)
	self.UpdateRows()
		
    def OnRightClickCell(self,evt):
	
        self.row_choiced = evt.GetRow()
	self.grid_multiupload.SelectRow(self.row_choiced)
	
	if self.actions[self.row_choiced] == "":
	    evt.Skip()
	    return
    
	if not hasattr(self, "firstpopup"):
		self.firstpopup = True
		self.PopupItemClearItem = wx.NewId()
		self.Bind(wx.EVT_MENU, self.OnPopupClearItem, id=self.PopupItemClearItem)
		
	MyPopupMenu = wx.Menu()
	MyPopupMenu.Append(self.PopupItemClearItem,_("Clear content"))
	pos = self.ScreenToClient(wx.GetMousePosition())
	self.PopupMenu(MyPopupMenu, pos)
	MyPopupMenu.Destroy()
	
	evt.Skip()
		
    def OnPopupClearItem(self,evt):
	self.files[self.row_choiced] = ""
	self.UpdateRows()
		
    def OnLeftClickCell(self, evt):

        row = evt.GetRow()
        col = evt.GetCol()      
	 
        if self.actions[row] == "openvideo":
            dlg = wx.FileDialog(self, message=_("Browse video..."), defaultDir=globals.preferences_list["cwd"], 
				defaultFile="", wildcard=globals.videos_wildcards, style=wx.OPEN |wx.CHANGE_DIR)

	    if dlg.ShowModal() == wx.ID_OK:
		 self.grid_multiupload.SetCellValue(row,col,dlg.GetPath())
		 globals.preferences_list["cwd"] = os.path.dirname(dlg.GetPath())
		 self.files[row] = dlg.GetPath()
		 detect_sub = self.parent.AutoDetectFile(dlg.GetPath(),globals.subs_ext)
		 if detect_sub:
		     self.grid_multiupload.SetCellValue(row+1,col,detect_sub)
		     self.files[row+1] = detect_sub
    		 self.AutoCheckGridCds()
		 
	    dlg.Destroy()
        elif self.actions[row] == "opensub":
            dlg = wx.FileDialog(self, message=_("Browse subtitle..."), defaultDir=globals.preferences_list["cwd"],
				defaultFile="", wildcard="All subs (*.srt;*.sub;*.txt;*.ssa;*.smi)|*.srt;*.sub;*.txt;*.ssa;*.smi|ALL files (*.*)|*.*", 
				style=wx.OPEN |wx.CHANGE_DIR)

	    if dlg.ShowModal() == wx.ID_OK:
		 self.grid_multiupload.SetCellValue(row,col,dlg.GetPath())
		 globals.preferences_list["cwd"] = os.path.dirname(dlg.GetPath())
		 self.files[row] = dlg.GetPath()
		 detect_video = self.parent.AutoDetectFile(dlg.GetPath(),globals.videos_ext)
		 if detect_video:
		     self.grid_multiupload.SetCellValue(row-1,col,detect_video)
		     self.files[row-1] = detect_video
		 self.AutoCheckGridCds()
	    dlg.Destroy()
	    

        evt.Skip()
# end of class MyDialogMoreCds


