#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4.1 on Sun Jul 16 22:57:38 2006
#Copyright (C) IVAN GARCIA capiscuas@gmail.com

#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

try:
	import wx
except:
	import platform
	if platform.uname()[0] == "Windows" and platform.uname()[2] != "XP":
		wx.MessageBox("If you are using a non Windows XP OS, \nplease save GDIPLUS.DLL in the program's folder"+
			      "\n Download it from this address: \n"+
			      "http://www.dlldump.com/download-dll-files_new.php/dllfiles/G/GDIPLUS.DLL/5.1.3097.0/download.html")
import globals
import gettext,locale
import __builtin__

import PanelOptions
import PanelDownload
import PanelHelp
import PanelUpload
import PanelLog

import webbrowser

import  wx.lib.buttons  as  buttons
import  cStringIO
import os
import SubDownloaderFrame
import extra.LabelBook.LabelBook as LB
from extra.LabelBook.Resources import *
from extra.AdvancedSplash import AdvancedSplash as AS
import thread
import threading
import  time
#import timeoutsocket
#import httpclient
import gzip
import RecursiveParser
import  images
import SearchWindow
import SaveasReplaceDialog

import IMDBSearch
import locale
import pickle
import UpdateAlert
import platform
import base64
from extra.PyProgress import PyProgress as PP


try:
	import win32api
except: 
	pass

try:
	from wx.lib.wordwrap import wordwrap
except:
	pass

		
class MainFrame(wx.Frame):
	def __init__(self,parent, *args, **kwds):
		
		
		
		self.menubar_preferences = wx.NewId()
		self.menubar_viewlog = wx.NewId()
		self.menubar_login = wx.NewId()
		self.menubar_about = wx.NewId()
		self.menubar_exit = wx.NewId()
		self.menubar_donate= wx.NewId()
		self.menubar_contact = wx.NewId()
		self.menubar_tutorial = wx.NewId()
		self.parent = parent
		
		
		globals.subdownloaderframe = self
		

		# begin wxGlade: MainFrame.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.panel_1 = wx.Panel(self, -1)
		
		# Menu Bar
		self.SubDownloaderFrame_menubar = wx.MenuBar()
		self.SetMenuBar(self.SubDownloaderFrame_menubar)
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(self.menubar_login, _("log-in"), "", wx.ITEM_NORMAL)
		wxglade_tmp_menu.AppendSeparator()
		wxglade_tmp_menu.Append(self.menubar_exit, _("Exit"), "", wx.ITEM_NORMAL)
		self.SubDownloaderFrame_menubar.Append(wxglade_tmp_menu, _("Main"))
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(self.menubar_tutorial, _("Tutorial"), "", wx.ITEM_NORMAL)
		wxglade_tmp_menu.Append(self.menubar_contact, _("Contact us"), "", wx.ITEM_NORMAL)
		wxglade_tmp_menu.Append(self.menubar_donate, _("Donate"), "", wx.ITEM_NORMAL)
		wxglade_tmp_menu.Append(self.menubar_about, _("About"), "", wx.ITEM_NORMAL)
		self.SubDownloaderFrame_menubar.Append(wxglade_tmp_menu, _("Help"))
		# Menu Bar end
		self.donate_button = wx.BitmapButton(self.panel_1, -1, wx.NullBitmap)
		self.bitmap_bigbanner = wx.BitmapButton(self.panel_1, -1, wx.NullBitmap)
		self.static_line_1 = wx.StaticLine(self.panel_1, -1)
		self.book = wx.Panel(self.panel_1, -1)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
	
		
		
			
		self.FindFocus()
		self.Refresh()
		
		self.Show()
		self.CenterOnScreen()
					
		self.ReportErrors()

		if globals.param_function == "--search":
			self.panel_download.AddVideo("")
			self.panel_download.OnButtonSearch(wx.EVT_BUTTON)
			
		elif globals.param_function == "--upload":
			self.book.SetSelection(1)
			self.panel_upload.CheckParamsIn()
			self.panel_upload.OnChangeComboFiles(wx.EVT_TEXT)

	def __set_properties(self):

		self.book.Destroy()
		style = INB_LEFT|INB_BORDER|INB_GRADIENT_BACKGROUND|INB_DRAW_SHADOW
		self.book = LB.LabelBook(self.panel_1, -1, style=style)
		
		
		
		# begin wxGlade: MainFrame.__set_properties
		self.SetTitle(_("SubDownloader"))
		self.SetSize((840, 635))
		self.donate_button.SetSize(self.donate_button.GetBestSize())
		self.bitmap_bigbanner.SetSize(self.bitmap_bigbanner.GetBestSize())
		self.book.SetMinSize((7, 14))
		# end wxGlade
				
		
		self.CheckParamsIn()
		if globals.param_function != "--search" and globals.param_function != "--upload":
		     wx.MilliSleep(2000)
		     
		globals.splash.Close()
		self.Refresh()
		     
		
	def CreateLabelBookImageList(self):
		_pageIcons = ["search.png", "upload.png", "preferences.png", "helpus.png", "news.png"]
		imagelist = wx.ImageList(32, 32)
		for img in _pageIcons:
		    bmp = wx.Bitmap(os.path.join(globals.sourcefolder,"images/labelbook/"+img), wx.BITMAP_TYPE_PNG)
		    imagelist.Add(bmp)
		
		return imagelist
	
	def __do_layout(self):
		
		self.panel_log = PanelLog.PanelLog(self.book,-1)
		globals.text_log = self.panel_log.text_log
		
		self.InitializeComponentsLayout()
		self.InitializeComponentsProcess()
		
		self.imagelist = self.CreateLabelBookImageList()
		self.book.AssignImageList(self.imagelist)
		self.panel_download = PanelDownload.PanelDownload(self.book,-1)
		self.panel_upload = PanelUpload.PanelUpload(self.book,-1)
		self.panel_options = PanelOptions.PanelOptions(self.book,-1)
		self.panel_help = PanelHelp.PanelHelp(self.book,-1)
		
		self.book.AddPage(self.panel_download,
                              _("Search"), True, 0)
		self.book.AddPage(self.panel_upload,
                              _("Upload"), True, 1)
		self.book.AddPage(self.panel_options,
                              _("Options"), True, 2)
		self.book.AddPage(self.panel_help,
                              _("Help us"), True, 3)
		self.book.AddPage(self.panel_log,
                              _("Log"), True, 4)
		
		self.book.SetSelection(0)
		self.book._pages.SetTabAreaWidth(124)
		# begin wxGlade: MainFrame.__do_layout
		sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_main = wx.BoxSizer(wx.VERTICAL)
		sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4.Add(self.donate_button, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
		sizer_4.Add(self.bitmap_bigbanner, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
		sizer_main.Add(sizer_4, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		sizer_main.Add(self.static_line_1, 0, wx.EXPAND, 0)
		sizer_main.Add(self.book, 1, wx.EXPAND, 0)
		self.panel_1.SetAutoLayout(True)
		self.panel_1.SetSizer(sizer_main)
		sizer_main.Fit(self.panel_1)
		sizer_main.SetSizeHints(self.panel_1)
		sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
		self.SetAutoLayout(True)
		self.SetSizer(sizer_1)
		self.Layout()
		# end wxGlade
	

	

	def OnClose(self,evt):
			
		try:
			pickle.dump(globals.preferences_list,file(os.path.join(globals.sourcefolder,globals.preferences_filename),"wb"))
		except:
			error = "Error trying to save preferences in '" + os.path.join(globals.sourcefolder,globals.preferences_filename)
			wx.MessageBox(error)
			globals.Log(error)
		
		wx.BusyInfo("Saving Preferences,please wait...")

		self.Destroy()


	

	def InitializeComponentsProcess(self):

		try:
			if globals.preferences_list["show_tips"]:
				provider = wx.CreateFileTipProvider(os.path.join(globals.sourcefolder,"tips.txt"), 0)
				globals.preferences_list["show_tips"] = wx.ShowTip(None, provider, True)
		except:
			globals.Log("Error displaying TIPS")
		
		self.CenterOnScreen()
		version = "SubDownloader " +globals.version
		if globals.disable_osdb:
			message = version + " : "+ _("Not Connected")
		elif globals.logged_as:
			message = version +" : "+ _("Connected as %s") % globals.logged_as
		else:
			message = version +" : "+ _("Connected anonymously")
		self.SetTitle(message)
		
		self.Refresh()
		

	def ReportErrors(self):
		errorfile = os.path.join(globals.sourcefolder,"SubDownloader.exe.log")
		if os.path.exists(errorfile):
			f = file(errorfile)
			reportfile = f.read()
			f.close()
			
			
			dlg = wx.MessageDialog(
			   None,
			   _("The application found some errors. Would you like to report them to be corrected?"),
			   _("Reporting errors"),
			   wx.YES_NO | wx.ICON_QUESTION 
			   )
			userChoice = dlg.ShowModal()
			if userChoice == wx.ID_YES:
				
				try:
					globals.xmlrpc_server.SendBug("BUG\n"+ globals.version + "\n" +platform.platform() + "\n" +reportfile,globals.preferences_list["username"],"IP")
					wx.MessageBox(_("Thank you very much"))
				except:
					wx.MessageBox(_("Error sending bug. Thank you anyway"))
					
			try:
				os.remove(errorfile)
			except:
				pass
					
				

			
			
	def InitializeComponentsLayout(self):
		_icon = wx.EmptyIcon()
		_icon.CopyFromBitmap(wx.Bitmap(os.path.join(globals.sourcefolder,"icon32.ico"), wx.BITMAP_TYPE_ANY))
		self.SetIcon(_icon)

		
	        self.donate_button.Destroy()
		self.donate_button = wx.BitmapButton(self.panel_1, -1, wx.Bitmap(os.path.join(globals.sourcefolder,"donate.gif"), wx.BITMAP_TYPE_ANY))
 
		self.bitmap_bigbanner.Destroy()
		self.bitmap_bigbanner = wx.BitmapButton(self.panel_1, -1, wx.Bitmap(os.path.join(globals.sourcefolder,"bigbanner_opensubs.jpg"), wx.BITMAP_TYPE_ANY))
		
		#if wx.PLATFORM_WINDOWS:
			#self.panel_ads.Destroy()
			#self.panel_ads = wx.BitmapButton(self.panel_1, -1, wx.Bitmap(os.path.join(globals.sourcefolder,"images/banner_ads.gif"), wx.BITMAP_TYPE_ANY))
			#self.panel_ads.SetToolTipString(_("Click here to open advertising site"))
			#self.Bind(wx.EVT_BUTTON, self.OnButtonAds, self.panel_ads)

		self.SetTitle("SubDownloader " + globals.version)

		
			
		self.Bind(wx.EVT_CLOSE, self.OnClose)
		self.Bind(wx.EVT_BUTTON, self.OnButtonBanner, self.bitmap_bigbanner)
		
		
		self.Bind(LB.EVT_IMAGENOTEBOOK_PAGE_CHANGED, self.OnPageChanged,self.book)
		self.Bind(wx.EVT_MENU, self.OnButtonTutorial, id=self.menubar_tutorial)
		self.Bind(wx.EVT_MENU, self.OnButtonDonate, id=self.menubar_donate)
		self.Bind(wx.EVT_BUTTON, self.OnButtonDonate, self.donate_button)
		self.Bind(wx.EVT_MENU, self.OnButtonContact, id=self.menubar_contact)
		self.Bind(wx.EVT_MENU, self.OnMenuLogin, id=self.menubar_login)
		self.Bind(wx.EVT_MENU, self.OnExit, id=self.menubar_exit)
		self.Bind(wx.EVT_MENU, self.OnAbout, id=self.menubar_about)

		self.Show()
		self.Refresh()
		
		
			
		return self
	
	def OnPageChanged(self,event):
		if event.GetSelection() == 1 and not globals.logged_as:
			wx.MessageBox(_("We strongly recommend to log-in before uploading files"),_("Please Login"))
		
	def CheckParamsIn(self):
		if globals.param_function:
			if globals.param_function == "--search":
				cachefile = ".cachesearch"
			elif globals.param_function == "--upload":
				cachefile = ".cacheupload"

			
			exit = False
			files_number = 0
			maximum = 10

			lines = ""
			count = 0
			go_up = True
			while not exit:
				exit = True
				for x in xrange(30):	
					if os.path.exists(os.path.join(globals.sourcefolder,cachefile)):
						lines=open(os.path.join(globals.sourcefolder,cachefile), 'r').readlines()
					else:
						return
					
					if globals.debugmode:
						print len(lines)
						
					if len(lines) > files_number:
						files_number = len(lines)
						exit = False
						break
					wx.MilliSleep(100)
					
			
			
			if globals.debugmode:
				print "FinishQueuing"
			
			if os.path.exists(os.path.join(globals.sourcefolder,cachefile)):
				os.remove(os.path.join(globals.sourcefolder,cachefile))
				
			for line in lines:
				globals.param_files.append(line.rstrip())
				if globals.debugmode:
					print line.rstrip()
	
		
	def OnMenuLogin(self,evt):
		globals.doing_login = True
		self.book.SetSelection(2)
		self.panel_options.notebook.SetSelection(0)


	
	def OnButtonAds(self,event):
		try:
			webbrowser.open("http://www.usenext.de/index.cfm?TD=391345")
		except:
			msg = _("Error opening link")
			wx.MessageBox(msg + " http://www.usenext.de/index.cfm?TD=391345")
	def OnButtonBanner(self,event):
		try:
			webbrowser.open(globals.MakeOSLink(""))
		except:
			msg = _("Error opening link")
			wx.MessageBox(msg + " " + globals.MakeOSLink(""))
		
	def OnButtonDonate(self,event):
		try:
			webbrowser.open("http://sourceforge.net/donate/index.php?group_id=171818")
		except:
			msg = _("Error opening link")
			wx.MessageBox(msg + " http://sourceforge.net/donate/index.php?group_id=171818")
	
	def OnButtonTutorial(self,event):
		try:
			webbrowser.open("http://www.vinalinux.com/projects/subdownloader/help/flow.html")
		except:
			msg = _("Error opening link")
			wx.MessageBox(msg  + " http://www.vinalinux.com/projects/subdownloader/help/flow.html")
			
	def OnButtonContact(self,event):
		try:
			webbrowser.open("http://sourceforge.net/tracker/?group_id=171818")
		except:
			msg = _("Error opening link")
			wx.MessageBox(msg  + " http://sourceforge.net/tracker/?group_id=171818")
		
	def OnExit(self, event): 
		self.Close()
		
	def OnAbout(self, event): 

		try:
			info = wx.AboutDialogInfo()
			info.Name = "SubDownloader"
			info.Version = globals.version
			info.Copyright = "(C) 2007 Ivan Garcia - capiscuas@gmail.com"
			info.Description = wordwrap(
			    "\"SubDownloader\" is a program that has the simpliest "
			    "way to download and upload subtitles for your video files."
			    '\n\n\nMain Developper : IVAN GARCIA - capiscuas@gmail.com\n'+ \
			    'Python developper: Nageswara Rao M - whatisthis20@gmail.com\n' + 
			    'OSDB Database admin : admin@opensubtitles.org\n' +
			    'ISDB Database admin : Gabbest'+
			     '\n\nDate released = ' + globals.date_released +'\n\n' ,
			    400, wx.ClientDC(self))
			info.WebSite = ("http://subdownloader.sourceforge.net", "Subdownloader Home Page")
			info.Developers = [ "Ivan Garcia - capiscuas@gmail.com",
					    "admin@opensubtitles.org","ageswara Rao M - whatisthis20@gmail.com"]
			
			licenseText = "\tGNU GENERAL PUBLIC LICENSE\nVersion 2, June 1991\n\nVisit http://www.gnu.org/copyleft/gpl.html"
				    
			info.License = wordwrap(licenseText, 500, wx.ClientDC(self))
		
			# Then we call wx.AboutBox giving it that info object
			wx.AboutBox(info)
		except:
			dlg = wx.MessageDialog(self, 'SubDownloader version = ' + globals.version +'\n' + \
				       'Date released = ' + globals.date_released +'\n\n' + \
				       'Main Developper : IVAN GARCIA - capiscuas@gmail.com\n'+ \
					'Python developper: Nageswara Rao M - whatisthis20@gmail.com\n' + 
				       'OSDB Database admin : admin@opensubtitles.org\n' +
				       'ISDB Database admin : Gabbest',
                               'About',
                               wx.OK | wx.ICON_INFORMATION
                               #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                               )
			dlg.ShowModal()
			dlg.Destroy()
	    
	
			
	def updatethread(self):
		try:
			update_list = globals.xmlrpc_server.AutoUpdate("SubDownloader")
		except:
			globals.Log("Error xmlrpc updates")
			return
			
		if update_list['version'] != globals.version:
			newversion_split = update_list['version'].split(".")
			myversion_split = globals.version.split(".")
			
			new_version_bigger = False
			for pos,number in enumerate(newversion_split):
				if int(number) > int(myversion_split[pos]):
					new_version_bigger = True
					
			if new_version_bigger:
				globals.update_list = update_list

		
		
	
	def LogMessage(self,message,status="ERROR"):
		if status == "ERROR":
			self.has_been_errors = True
		self.text_logmessages += (message + "\n")

	
#FUNCIONES EXTERNAS

def getISDBMovies(data):
	lines = data.split("\n")
	if len(lines) == 0 :
		return {}
	else:
		values = {}
		values["listmovies"] = []
		movies = values["listmovies"]
		for line in lines:
			params = line.split("=")
			param = params[0]
			if len(params) > 1:
				value = params[1]
				
			if param == "ticket":
				values["ticket"] = value
			elif param == "movie":
				movie = {}
				movie["subtitles"] = []
				movie["titles"] = value.split("|")
			elif param == "subtitle":
				subtitle = {}
				subtitle["idsubtitle"] = int(value)
			elif param == "name":
				subtitle["name"] = value
			elif param == "discs":
				subtitle["discs"] = int(value)
			elif param == "disc_no":
				subtitle["disc_no"] = int(value)
			elif param == "format":
				subtitle["format"] = value
			elif param == "iso639_2":
				subtitle["iso639_2"] = value
			elif param == "language":
				subtitle["language"] = value
			elif param == "nick":
				subtitle["nick"] = value
			elif param == "email":
				subtitle["email"] = value
			elif param == "endsubtitle":
				movie["subtitles"].append(subtitle)
			elif param == "endmovie":
				movies.append(movie)
			elif param == "end":
				return values
		
