#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4.1 on Tue Feb 20 17:04:26 2007

import wx
import os
import md5
from extra.extendedChoice import ExtendedChoice as EChoice
import SubDownloaderFrame
import UploadConfirmation
import MoreCdsUpload
import IMDBSearch
import zlib,base64
import re
import imdb
import globals
import webbrowser
import thread
import threading
import RecursiveParser
import autodetect_lang
from extra.PyProgress import PyProgress as PP

try:
	import win32api
except: 
	pass


NO_IMDB_TEXT = "Search the IMDB ID..."

class MyFileSubDropTarget(wx.FileDropTarget):
	#No funciona en windows creo.
        def __init__(self,window,combo):
                wx.FileDropTarget.__init__(self)
                self.combo = combo
		self.window = window
        
        def OnDropFiles(self, x, y, filenames):
                #TODO: permitir arrastar tanto la peli como el subtitlo a la vez.
                self.combo.SetValue(filenames[0])
		self.combo.SetInsertionPointEnd()
                #self.combo.GetEventHandler().ProcessEvent(wx.EVT_TEXT)
                self.window.OnChangeComboFiles(wx.EVT_TEXT)
                


class PanelUpload(wx.Panel):
    def __init__(self, *args, **kwds):
	    

        # begin wxGlade: PanelUpload.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.notebook_serials = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_serials, -1)
        self.notebook_movies = wx.Panel(self.notebook_serials, -1)
        self.sizer_2cd_staticbox = wx.StaticBox(self.notebook_movies, -1, _("2nd Step: CD2 files"))
        self.sizer_5_staticbox = wx.StaticBox(self.notebook_movies, -1, _("3rd Step: Let's see if the subtitle(s) are already in the DataBase"))
        self.sizer_6_staticbox = wx.StaticBox(self.notebook_movies, -1, _("4th Step: Required Information"))
        self.sizer_10_staticbox = wx.StaticBox(self.notebook_movies, -1, _("5th Step: Optional Information"))
        self.sizer_7_staticbox = wx.StaticBox(self.notebook_movies, -1, _("6th Step: Uploading the subtitle"))
        self.sizer_1cd_staticbox = wx.StaticBox(self.notebook_movies, -1, _("1st Step: CD1 files"))
        self.label_video1 = wx.StaticText(self.notebook_movies, -1, _("CD1 AVI file:"))
        self.combo_1video_file = wx.ComboBox(self.notebook_movies, -1, choices=[], style=wx.CB_DROPDOWN)
        self.browse_1video_button = wx.Button(self.notebook_movies, -1, _("Browse avi..."))
        self.label_sub1 = wx.StaticText(self.notebook_movies, -1, _("CD1 subtitle file:"))
        self.combo_1sub_file = wx.ComboBox(self.notebook_movies, -1, choices=[], style=wx.CB_DROPDOWN)
        self.browse_1sub_button = wx.Button(self.notebook_movies, -1, _("Browse sub..."))
        self.checkbox_cd2 = wx.CheckBox(self.notebook_movies, -1, _("Yes, there is an CD2 file."))
        self.label_video2 = wx.StaticText(self.notebook_movies, -1, _("CD2 AVI file:"))
        self.combo_2video_file = wx.ComboBox(self.notebook_movies, -1, choices=[], style=wx.CB_DROPDOWN)
        self.browse_2video_button = wx.Button(self.notebook_movies, -1, _("Browse avi..."))
        self.label_sub2 = wx.StaticText(self.notebook_movies, -1, _("CD2 subtitle file:"))
        self.combo_2sub_file = wx.ComboBox(self.notebook_movies, -1, choices=[], style=wx.CB_DROPDOWN)
        self.browse_2sub_button = wx.Button(self.notebook_movies, -1, _("Browse sub..."))
        self.button_addmorecd = wx.Button(self.notebook_movies, -1, _("Add more Cds"))
        self.label_morecds = wx.StaticText(self.notebook_movies, -1, "")
        self.button_confirm = wx.Button(self.notebook_movies, -1, _("Confirm..."))
        self.label_sublanguage = wx.StaticText(self.notebook_movies, -1, _("Subtitle Language:"))
        self.combo_sublanguages = wx.ComboBox(self.notebook_movies, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_autodetect_language = wx.StaticText(self.notebook_movies, -1, "")
        self.label_movieimdb = wx.StaticText(self.notebook_movies, -1, _("Movie IMDB ID:"))
        self.text_imdb_id = wx.Choice(self.notebook_movies, -1, choices=[])
        self.button_searchimdb = wx.Button(self.notebook_movies, -1, _("Search ID..."))
        self.label_releasename = wx.StaticText(self.notebook_movies, -1, _("Release name:"))
        self.text_releasename = wx.TextCtrl(self.notebook_movies, -1, "")
        self.label_optional1 = wx.StaticText(self.notebook_movies, -1, _("Alternative Movie title (AKA): "))
        self.text_optional1 = wx.TextCtrl(self.notebook_movies, -1, "")
        self.label_comments = wx.StaticText(self.notebook_movies, -1, _("Comments:"))
        self.text_comments = wx.TextCtrl(self.notebook_movies, -1, "", style=wx.TE_MULTILINE)
        self.bitmap_cover = wx.StaticBitmap(self.notebook_movies, -1, wx.NullBitmap)
        self.button_upload = wx.Button(self.notebook_movies, -1, _("Upload"))
        self.label_1 = wx.StaticText(self.notebook_1_pane_2, -1, _("Cooming Soon !\nFor the moment, use the \"More Cds\" button in \"Upload Movies\""))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PanelUpload.__set_properties
        self.label_video1.SetMinSize((117, 18))
        self.browse_1video_button.SetMinSize((120, 30))
        self.label_sub1.SetMinSize((117, 18))
        self.browse_1sub_button.SetMinSize((120, 30))
        self.label_video2.SetMinSize((117, 18))
        self.label_video2.Enable(False)
        self.combo_2video_file.Enable(False)
        self.browse_2video_button.SetMinSize((120, 30))
        self.browse_2video_button.Enable(False)
        self.label_sub2.SetMinSize((119, 18))
        self.label_sub2.Enable(False)
        self.combo_2sub_file.Enable(False)
        self.browse_2sub_button.SetMinSize((120, 30))
        self.browse_2sub_button.Enable(False)
        self.button_addmorecd.Enable(False)
        self.label_morecds.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_morecds.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_confirm.Enable(False)
        self.label_sublanguage.SetMinSize((150, 18))
        self.label_autodetect_language.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_movieimdb.SetMinSize((150, 18))
        self.label_movieimdb.Enable(False)
        self.button_searchimdb.Enable(False)
        self.label_releasename.SetMinSize((143, 13))
        self.label_releasename.Enable(False)
        self.text_releasename.Enable(False)
        self.label_optional1.SetMinSize((143, 13))
        self.label_optional1.Enable(False)
        self.text_optional1.Enable(False)
        self.label_comments.SetMinSize((143, 13))
        self.label_comments.Enable(False)
        self.text_comments.SetMinSize((500, 40))
        self.text_comments.Enable(False)
        self.button_upload.Enable(False)
        self.label_1.SetForegroundColour(wx.Colour(204, 50, 50))
        self.label_1.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        # end wxGlade

    def __do_layout(self):
	self.bitmap_cover.Destroy()
	cover_file = os.path.join(globals.sourcefolder,"images","covers","no_poster.gif")
	self.img_nocover = wx.Bitmap(cover_file, wx.BITMAP_TYPE_GIF)
	self.bitmap_cover = wx.StaticBitmap(self.notebook_movies, -1, wx.Bitmap(os.path.join(globals.sourcefolder,"images","covers","no_poster.gif"), wx.BITMAP_TYPE_ANY))
		
        # begin wxGlade: PanelUpload.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
        sizer_10 = wx.StaticBoxSizer(self.sizer_10_staticbox, wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_9_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        sizer_2cd = wx.StaticBoxSizer(self.sizer_2cd_staticbox, wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1cd = wx.StaticBoxSizer(self.sizer_1cd_staticbox, wx.VERTICAL)
        sizer_12_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12_copy_1.Add(self.label_video1, 0, wx.RIGHT|wx.ADJUST_MINSIZE, 0)
        sizer_12_copy_1.Add(self.combo_1video_file, 1, wx.LEFT|wx.RIGHT|wx.ADJUST_MINSIZE, 5)
        sizer_12_copy_1.Add(self.browse_1video_button, 0, wx.ADJUST_MINSIZE, 0)
        sizer_1cd.Add(sizer_12_copy_1, 0, wx.EXPAND, 0)
        sizer_12_copy_copy.Add(self.label_sub1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_12_copy_copy.Add(self.combo_1sub_file, 1, wx.LEFT|wx.RIGHT|wx.ADJUST_MINSIZE, 5)
        sizer_12_copy_copy.Add(self.browse_1sub_button, 0, wx.ADJUST_MINSIZE, 0)
        sizer_1cd.Add(sizer_12_copy_copy, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_1cd, 0, wx.EXPAND, 0)
        sizer_2cd.Add(self.checkbox_cd2, 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.label_video2, 0, wx.RIGHT|wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.combo_2video_file, 1, wx.LEFT|wx.RIGHT|wx.ADJUST_MINSIZE, 5)
        sizer_12.Add(self.browse_2video_button, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2cd.Add(sizer_12, 0, wx.EXPAND, 0)
        sizer_12_copy.Add(self.label_sub2, 0, wx.ADJUST_MINSIZE, 0)
        sizer_12_copy.Add(self.combo_2sub_file, 1, wx.LEFT|wx.RIGHT|wx.ADJUST_MINSIZE, 5)
        sizer_12_copy.Add(self.browse_2sub_button, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2cd.Add(sizer_12_copy, 0, wx.EXPAND, 0)
        sizer_4.Add(self.button_addmorecd, 0, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(self.label_morecds, 0, wx.LEFT|wx.ADJUST_MINSIZE, 5)
        sizer_2cd.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_2cd, 0, wx.EXPAND, 0)
        sizer_5.Add(self.button_confirm, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(sizer_5, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.label_sublanguage, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(self.combo_sublanguages, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(self.label_autodetect_language, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
        sizer_6.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_9.Add(self.label_movieimdb, 0, wx.ADJUST_MINSIZE, 0)
        sizer_9.Add(self.text_imdb_id, 1, wx.ADJUST_MINSIZE, 0)
        sizer_9.Add(self.button_searchimdb, 0, wx.ADJUST_MINSIZE, 0)
        sizer_6.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_8_copy_copy.Add(self.label_releasename, 0, wx.ADJUST_MINSIZE, 0)
        sizer_8_copy_copy.Add(self.text_releasename, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(sizer_8_copy_copy, 0, wx.EXPAND, 0)
        sizer_8_copy.Add(self.label_optional1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_8_copy.Add(self.text_optional1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(sizer_8_copy, 0, wx.EXPAND, 0)
        sizer_9_copy.Add(self.label_comments, 0, wx.ADJUST_MINSIZE, 0)
        sizer_9_copy.Add(self.text_comments, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(sizer_9_copy, 1, wx.EXPAND, 0)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_10.Add(self.bitmap_cover, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_7.Add(self.button_upload, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(sizer_7, 0, wx.EXPAND, 0)
        self.notebook_movies.SetAutoLayout(True)
        self.notebook_movies.SetSizer(sizer_2)
        sizer_2.Fit(self.notebook_movies)
        sizer_2.SetSizeHints(self.notebook_movies)
        sizer_8.Add(self.label_1, 0, wx.ADJUST_MINSIZE, 0)
        self.notebook_1_pane_2.SetAutoLayout(True)
        self.notebook_1_pane_2.SetSizer(sizer_8)
        sizer_8.Fit(self.notebook_1_pane_2)
        sizer_8.SetSizeHints(self.notebook_1_pane_2)
        self.notebook_serials.AddPage(self.notebook_movies, _("Movies"))
        self.notebook_serials.AddPage(self.notebook_1_pane_2, _("Serials/Seasons/Episodes"))
        sizer_1.Add(self.notebook_serials, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        # end wxGlade
	self.InitComponents()
	
    def InitComponents(self):
        #parent = self.parent
        self.Bind(wx.EVT_BUTTON, self.OnBrowseSub1Button, self.browse_1sub_button)
	self.Bind(wx.EVT_BUTTON, self.OnBrowseVideo1Button, self.browse_1video_button)
	self.Bind(wx.EVT_BUTTON, self.OnBrowseSub2Button, self.browse_2sub_button)
	self.Bind(wx.EVT_BUTTON, self.OnBrowseVideo2Button, self.browse_2video_button)
	
	self.Bind(wx.EVT_BUTTON, self.OnAddMoreCDs, self.button_addmorecd)
	
        self.Bind(wx.EVT_TEXT, self.OnChangeComboFiles,self.combo_1sub_file)
	self.Bind(wx.EVT_TEXT, self.OnChangeComboFiles,self.combo_2sub_file)
	self.Bind(wx.EVT_TEXT, self.OnChangeComboFiles,self.combo_1video_file)
	self.Bind(wx.EVT_TEXT, self.OnChangeComboFiles,self.combo_2video_file)
	
	self.Bind(wx.EVT_CHOICE, self.OnChangeImdb,self.text_imdb_id)
	self.Bind(wx.EVT_BUTTON, self.OnIMDBButton, self.button_searchimdb)

        self.Bind(wx.EVT_CHECKBOX, self.OnCheckBoxCd2, self.checkbox_cd2)
        
        self.Bind(wx.EVT_BUTTON, self.OnConfirmButton,self.button_confirm)
	self.Bind(wx.EVT_BUTTON, self.OnUploadButton,self.button_upload)
	
	#No funciona en windows creo.
        self.combo_1video_file.SetDropTarget(MyFileSubDropTarget(self,self.combo_1video_file))
	self.combo_2video_file.SetDropTarget(MyFileSubDropTarget(self,self.combo_2video_file))
	self.combo_1sub_file.SetDropTarget(MyFileSubDropTarget(self,self.combo_1sub_file))
	self.combo_2sub_file.SetDropTarget(MyFileSubDropTarget(self,self.combo_2sub_file))
	#self.SetDropTarget(MyFileSubDropTarget(self,self.combo_2video_file))
	#self.SetDropTarget(MyFileSubDropTarget(self,self.combo_1sub_file))
	#self.SetDropTarget(MyFileSubDropTarget(self,self.combo_2sub_file))
        
	
		
	
	languages = []
	for xx,xxx in globals.sublanguages["languages_xx2xxx"].items():
		languages.append(globals.sublanguages["languages_id_xxx"][xxx][1])
	languages.sort()
	for lang in languages:
		self.combo_sublanguages.Append(lang)
	
	if globals.preferences_list.has_key("upload_language"):
		lang_str = globals.sublanguages["languages_id_xxx"][globals.sublanguages["languages_xx2xxx"][globals.preferences_list["upload_language"]]][1]
		self.combo_sublanguages.SetStringSelection(lang_str)
	else:
		self.combo_sublanguages.SetStringSelection(globals.sublanguages["languages_id_xxx"]["eng"][1])
        #Autodetecting subtitle in video folder
        
        try:
			a = globals.preferences_list["imdb_list"]
	except:
			globals.preferences_list["imdb_list"] = []
			
        for pos,imdb_key in enumerate(globals.preferences_list["imdb_list"]):
		self.text_imdb_id.Append(imdb_key[1])
	
	self.text_imdb_id.Insert(NO_IMDB_TEXT,0)
	self.text_imdb_id.SetStringSelection(NO_IMDB_TEXT)
		
		
	self.OnChangeComboFiles(wx.EVT_TEXT)
	
	self.moresubs_list = []
	self.moreavi_list = []
	self.morecd_values = {"rowlabels": [],"actions": [],"content_labels": [],"files": [],"total_cds": 2}

	
    def CheckParamsIn(self):
	    
	error_msg = ""
	if globals.param_function == "--upload":
 		globals.param_function = ""
		files_and_folders = []
		
		for shortfilename in globals.param_files:
			if os.path.exists(shortfilename):
				try:
					files_and_folders.append(unicode(win32api.GetLongPathName(shortfilename)))
				except:
					files_and_folders.append(shortfilename)
			else:
			   error_msg += "Not found: "+  shortfilename
		
		if error_msg:
			globals.Log("Errors found Context Uploading:\n" + error_msg)
			wx.MessageBox(error_msg,_("Errors found:"))
		subs= []
		videos = []
		if len(files_and_folders) == 0:
			return
		
		files = []
		for item in files_and_folders:
			if os.path.isdir(item):
				parser = RecursiveParser.RecursiveParser()
				files_found = parser.getRecursiveFileList(item, ['mpg','avi','mpeg','srt','sub','ssa','txt'])
				for filefound in files_found:
					files.append(filefound)
			else:
				files.append(item)
		
		for  file in files:
			if os.path.getsize(file) < 300000:
			   subs.append(file)
			else:
			   videos.append(file)
			
		if len(videos) == 1 and len(subs) == 1:
			self.InsertCd(1,videos[0],subs[0])
			
			avi2 = self.AutoDetect2ndAVI(videos[0])
			if avi2:
				
				self.InsertCd(2,avi2,"autodetect")
				self.checkbox_cd2.SetValue(True)
				self.EnableStep_Cd2(True)
			
		else:
			if len(videos) > 2 or len(subs) > 2:
				morecds_dialog = MoreCdsUpload.MyDialogMoreCds(self,False,self, -1, _("Upload More Cds"), size=(350, 200),
					#style = wxCAPTION | wxSYSTEM_MENU | wxTHICK_FRAME
					style = wx.DEFAULT_DIALOG_STYLE)
				
			if not len(videos):
				for num,sub in enumerate(subs):
					if num >= 2:
						video = self.AutoDetectFile(sub,globals.videos_ext)
						morecds_dialog.InsertNewCd(video,sub)
					else:
						self.InsertCd(num+1,"autodetect",sub)
				
			else:
				for num,video in enumerate(videos):
					if num >= 2:
						sub = self.AutoDetectFile(video,globals.subs_ext)
						morecds_dialog.InsertNewCd(video,sub)
					else:
						self.InsertCd(num+1,video,"autodetect")
			
			if len(videos) or len(subs)> 1:
				self.checkbox_cd2.SetValue(True)
				self.EnableStep_Cd2(True)
			if len(videos) > 2 or len(subs) > 2:
				self.Show()
				status = morecds_dialog.ShowModal()
				if status == wx.ID_OK:
					self.ExtraCdsLabelUpdate()
				morecds_dialog.Destroy()
	
    def InsertCd(self,number,moviefile="autodetect",subfile="autodetect"):
	    if subfile=="autodetect":
		    subfile = self.AutoDetectFile(moviefile,globals.subs_ext)
	    if moviefile=="autodetect":
		    moviefile = self.AutoDetectFile(subfile,globals.videos_ext)
		    
	    if number == 1:
		    self.combo_1video_file.SetValue(moviefile)
		    #self.combo_1video_file.SetInsertionPointEnd()
		    self.combo_1sub_file.SetValue(subfile)
		    #self.combo_1sub_file.SetInsertionPointEnd()

	    elif number == 2:
		    self.combo_2video_file.SetValue(moviefile)
		    #self.combo_2video_file.SetInsertionPointEnd()
		    self.combo_2sub_file.SetValue(subfile)
		    #self.combo_2sub_file.SetInsertionPointEnd()
	    
		    
		
    def OnAddMoreCDs(self,evt):
	    morecds_dialog = MoreCdsUpload.MyDialogMoreCds(self,True,self, -1, _("Upload More Cds"), size=(350, 200),
					#style = wxCAPTION | wxSYSTEM_MENU | wxTHICK_FRAME
					style = wx.DEFAULT_DIALOG_STYLE)
	    
	    status = morecds_dialog.ShowModal()
	    if status == wx.ID_OK:
		   self.ExtraCdsLabelUpdate()
	
	    morecds_dialog.Destroy()
	    
    def ExtraCdsLabelUpdate(self) :
	     total_newcds = len(self.moreavi_list)
	     if total_newcds:
		     self.label_morecds.SetLabel(_("%s extra CDs added.") % str(total_newcds))
	     else:
		     self.label_morecds.SetLabel("")
	    
    def OnCheckBoxCd2(self,evt):
            if self.checkbox_cd2.IsChecked():
                    self.EnableStep_Cd2(True)
            else:
                    self.EnableStep_Cd2(False)
	    self.OnChangeComboFiles(wx.EVT_TEXT)
    def EnableStep_Cd2(self,state):
            if state: 
                    self.combo_2sub_file.Enable()
                    self.combo_2video_file.Enable()
                    self.label_sub2.Enable()
                    self.label_video2.Enable()
                    self.browse_2sub_button.Enable()
                    self.browse_2video_button.Enable()
		    self.button_addmorecd.Enable()
		    
            else:
                    self.combo_2sub_file.Disable()
                    self.combo_2video_file.Disable()
                    self.label_sub2.Disable()
                    self.label_video2.Disable()
                    self.browse_2sub_button.Disable()
                    self.browse_2video_button.Disable()
		    self.button_addmorecd.Disable()
		    

    def EnableStep_Commit(self,state):
            if state: 
                    self.button_confirm.Enable()
            else:
                    self.button_confirm.Disable()
		    self.EnableStep_Info(False)
   
    def EnableStep_Info(self,state):
	    if state: 
		    self.label_sublanguage.Enable()
		    self.combo_sublanguages.Enable()
		    self.label_movieimdb.Enable()
		    self.text_imdb_id.Enable()
		    self.button_searchimdb.Enable()
		    
		    self.label_comments.Enable()
		    self.label_optional1.Enable()
		    self.label_releasename.Enable()
		    self.text_comments.Enable()
		    self.text_optional1.Enable()
		    self.text_releasename.Enable()
	    else:
		    self.label_sublanguage.Disable()
		    self.combo_sublanguages.Disable()
		    self.label_movieimdb.Disable()
		    self.text_imdb_id.Disable()
		    self.text_imdb_id.SetStringSelection(NO_IMDB_TEXT)
		    self.label_autodetect_language.SetLabel("")
		    self.button_searchimdb.Disable()
		    
		    self.label_comments.Disable()
		    self.label_optional1.Disable()
		    self.label_releasename.Disable()
		    self.text_comments.Disable()
		    self.text_optional1.Disable()
		    self.text_releasename.Disable()
		    
		    self.EnableStep_Upload(False)

    def EnableStep_Upload(self,state):
            if state: 
                    self.button_upload.Enable()
            else:
                    self.button_upload.Disable()
                    
    def OnBrowseSub1Button(self,evt):
        dlg = wx.FileDialog(
            self, message=_("Browse subtitle..."), defaultDir=globals.preferences_list["cwd"], 
            defaultFile="", wildcard="All subs (*.srt;*.sub;*.txt;*.ssa;*.smi)|*.srt;*.sub;*.txt;*.ssa;*.smi|ALL files (*.*)|*.*", style=wx.OPEN |wx.CHANGE_DIR)

        if dlg.ShowModal() == wx.ID_OK:
             self.combo_1sub_file.SetValue(dlg.GetPath())
	     globals.preferences_list["cwd"] = os.path.dirname(dlg.GetPath())
	     self.combo_1sub_file.SetInsertionPointEnd()
             self.OnChangeComboFiles(wx.EVT_TEXT)
             dlg.Destroy()
    def OnBrowseSub2Button(self,evt):
        dlg = wx.FileDialog(
            self, message=_("Browse subtitle..."), defaultDir=globals.preferences_list["cwd"], 
            defaultFile="", wildcard="All subs (*.srt;*.sub;*.txt;*.ssa;*.smi)|*.srt;*.sub;*.txt;*.ssa;*.smi|ALL files (*.*)|*.*", style=wx.OPEN |wx.CHANGE_DIR)

        if dlg.ShowModal() == wx.ID_OK:
             self.combo_2sub_file.SetValue(dlg.GetPath())
	     globals.preferences_list["cwd"] = os.path.dirname(dlg.GetPath())
	     self.combo_2sub_file.SetInsertionPointEnd()
             self.OnChangeComboFiles(wx.EVT_TEXT)
             dlg.Destroy()
	     
    def OnBrowseVideo1Button(self,evt):
        dlg = wx.FileDialog(
            self, message=_("Browse video..."), defaultDir=globals.preferences_list["cwd"], 
            defaultFile="", wildcard=globals.videos_wildcards, style=wx.OPEN |wx.CHANGE_DIR)

        if dlg.ShowModal() == wx.ID_OK:
	     globals.preferences_list["cwd"] = os.path.dirname(dlg.GetPath())
             
             
	     
	     #RESET 2ND CD
	     self.combo_2video_file.SetValue("")
	     self.combo_2sub_file.SetValue("")
	     
	     #RESET >2ND CD
	     self.moresubs_list = []
	     self.moreavi_list = []
	     self.morecd_values = {"rowlabels": [],"actions": [],"content_labels": [],"files": [],"total_cds": 2}
	     
	     self.InsertCd(1,dlg.GetPath(),"autodetect")
	     dlg.Destroy()
	     avi2 = self.AutoDetect2ndAVI(dlg.GetPath())
	     if avi2:
		     self.checkbox_cd2.SetValue(True)
		     self.InsertCd(2,avi2,"autodetect")
		     self.EnableStep_Cd2(True)
		
	     self.OnChangeComboFiles(wx.EVT_TEXT)
		     
    def OnBrowseVideo2Button(self,evt):
        dlg = wx.FileDialog(
            self, message=_("Browse video..."), defaultDir=globals.preferences_list["cwd"], 
            defaultFile="", wildcard=globals.videos_wildcards, style=wx.OPEN |wx.CHANGE_DIR)
	
	
        if dlg.ShowModal() == wx.ID_OK:
	     globals.preferences_list["cwd"] = os.path.dirname(dlg.GetPath())
             
	     self.InsertCd(2,dlg.GetPath(),"autodetect")
	     dlg.Destroy()
	     self.OnChangeComboFiles(wx.EVT_TEXT)
	     
    def OnChangeComboFiles(self,evt):
        if self.combo_1sub_file.GetValue() == "" or self.combo_1video_file.GetValue() == "" or \
	   (self.checkbox_cd2.IsChecked() and (self.combo_2sub_file.GetValue() == "" or self.combo_2video_file.GetValue() == "")):
		self.EnableStep_Commit(False)
	else:
            self.EnableStep_Commit(True)
	    self.EnableStep_Info(False)
        self.Refresh()
	
  

    def CheckCD(self,cd_number,videopath,subpath):
	    
	#Checking the AVI
	error_msg = ""
	hash = ""
	filesize = ""
	sub_md5hex = ""
	
	if not os.path.isfile(videopath):
			error_msg += "\nError: " + _("The video %(videopath)s doesn't exist.") % {'videopath': videopath}
	else:
		resultcd = globals.getAddress(videopath)
		if resultcd == "IOError":
			error_msg += "\n" + _("Found internal error in video CD%(cd_number)s : %(videopath)s") % {'videopath': videopath, 'cd_number':str(cd_number)}
		elif resultcd == "SizeError":
			error_msg += "\nError: " + _("Size too little of the video CD%(cd_number)s : %(videopath)s") % {'videopath': videopath, 'cd_number':str(cd_number)}


	#Checking the SUB			
        if not os.path.isfile(subpath):
            error_msg += "\nError: " + _("The subtitle %s doesn't exist.") % subpath
	    
        elif os.path.getsize(subpath) > 300000:
		error_msg += "\nError: " + _("Size of subtitle %s bigger than 300Kb")  % subpath
	#else:
	#Autodetecting Correct Subtitle Format
		#format = self.DetectSubFormat(subpath) 
		#globals.Log("Detected format of subtitle: "+ format)
		#wx.MessageBox("Detected format of subtitle: "+ format)
		#if format not in ["srt","ssa","sub","txt","smi"]:
			#error_msg += "\nError: " + _("Format of subtitle %(subpath)s is not valid") % {'subpath': subpath}
		
	if not error_msg:
		hash = resultcd["hash"]
		filesize = resultcd["filesize"]
		sub_md5hex = md5.new(file(subpath,mode='rb').read()).hexdigest()
		
		newavi = True
		for i in range(len(self.hash_list)):
			if hash == self.hash_list[i] and filesize == self.size_list[i]:
				error_msg += "\n" + _("Error: video CD %d = video CD %d") % (cd_number,i+1)
				newavi = False
				break
		
		if newavi:
			self.hash_list.append(hash)
			self.size_list.append(filesize)
		
		newsub = True
		for i in range(len(self.sub_md5_list)):
			if sub_md5hex == self.sub_md5_list[i]:
				error_msg += "\n" + _("Error: sub CD %d = sub CD %d") % (cd_number,i+1)
				newsub = False
				break
		
		if newsub:
			self.sub_md5_list.append(sub_md5hex)
			
		return error_msg,resultcd,sub_md5hex
	else:
		return error_msg,"",""
	
    #Not used yet
    def DetectSubFormat(self,subpath):
	sub_content = file(subpath).read()
	result = re.search('/^\d\d:\d\d:\d\d[,.]\d\d\d\s*-->\s*\d\d:\d\d:\d\d[,.]\d\d\d\s*$/m', sub_content)
	if result:
	 return  "srt"
	else:
		result = re.search('/^{(\d+)}{(\d*)}(.*)$/m', sub_content)
		if result:
			return  "sub"
		else:
		      result = re.search('/^<SAMI>/mi', sub_content)
		      if result:
			      return  "smi" 
		      else:
			   result = re.search('/^(\d\d):(\d\d):(\d\d)\.(\d\d)\,(\d\d):(\d\d):(\d\d)\.(\d\d)/m', sub_content)
			   if result:
				   return  "txt"
			   else:
				result = re.search('/^\[(Script Info|Events)\]/mi', sub_content)
				if result:
					return  "ssa"
				else:
					return "badsubformat"
			      


    def GenerateCDKey(self,resultcd,subpath,sub_md5hex):
	sub_basename = globals.EncodeLocale(os.path.basename(subpath))
	sub_basename = sub_basename.replace("'","''")
	fps,time_ms = globals.GetFpsAndTimeMs(resultcd["pathvideofilename"])  #disable for dump video files (0.0,0)
	return {"subhash":sub_md5hex,"subfilename":sub_basename,"moviehash":resultcd["hash"],"moviebytesize":resultcd["filesize"],\
			 "movietimems":time_ms,"moviefps":str(fps),"movieframes":"","moviefilename":resultcd["filename"].replace("'","''")}

    def OnConfirmButton(self,evt):
        
        error = False
	wx.BeginBusyCursor()
	info = wx.BusyInfo(_("Checking videofiles and subs, please wait..."))
	
        #---------------------Checking the CD1 ------------------------------------------------------
	self.hash_list = []
	self.size_list = []
	self.sub_md5_list = []
	
	cds_keys = {}
	subs_filepaths = {}
	error_msg = ""
	sub_filename = self.combo_1sub_file.GetValue()
	video1_filename = self.combo_1video_file.GetValue()
	error_cd,resultcd1,sub_md5hex = self.CheckCD(1,video1_filename,sub_filename)
	if not error_cd:
		cds_keys["cd1"] = self.GenerateCDKey(resultcd1,sub_filename,sub_md5hex)
		subs_filepaths["cd1"] = sub_filename
	error_msg +=error_cd
	if self.checkbox_cd2.IsChecked():
		sub_filename = self.combo_2sub_file.GetValue()
		error_cd,resultcd,sub_md5hex = self.CheckCD(2,self.combo_2video_file.GetValue(),sub_filename)
		if not error_cd:
			cds_keys["cd2"] = self.GenerateCDKey(resultcd,sub_filename,sub_md5hex)
			subs_filepaths["cd2"] = sub_filename
		error_msg +=error_cd
		for i in range(len(self.moreavi_list)):
			sub_filename = self.moresubs_list[i]
			error_cd,resultcd,sub_md5hex = self.CheckCD(i+3,self.moreavi_list[i],sub_filename)
			if not error_cd:
				cds_keys["cd"+str(i+3)] = self.GenerateCDKey(resultcd,sub_filename,sub_md5hex)
				subs_filepaths["cd"+str(i+3)] = sub_filename
			error_msg +=error_cd

	if error_msg:
	    wx.EndBusyCursor()
	    wx.MessageBox(error_msg)
	    return
	
	info = wx.BusyInfo(_("Checking subtitles in server, please wait..."))

	
	answer =""
	if globals.debugmode:
		globals.Log("-------------xmlrpc_server.TryUploadSubtitles:")
		globals.Log(cds_keys)
	try:
		answer = globals.xmlrpc_server.TryUploadSubtitles(globals.osdb_token,cds_keys)
		if globals.debugmode:
			globals.Log("-------------Received:")
			globals.Log(answer)
	except:
		error = _("Error Checking Subtitles in server, possible causes:")
		error += "\n-" + _("The connection with the server is off") + "\n-" + _("Your subtitle name has some special characters you should remove.")
		wx.MessageBox(error)
		globals.Log(error)
		self.Destroy()
		wx.EndBusyCursor()
		return
			
	wx.EndBusyCursor()
	if answer['alreadyindb']:
		subfounded1 = answer['data']
		MovieName = subfounded1['MovieName'].encode("ascii",'replace')
		MovieYear = subfounded1['MovieYear']
		MovieNameEng = subfounded1['MovieNameEng']
		IDSubtitle = subfounded1['IDSubtitle']
		if MovieNameEng:
			textname = "\"" +MovieName + "\" aka \"" + MovieNameEng + "\"" 
		else:
			textname = "\"" + MovieName + "\"" 

		if MovieYear:
			textname += " (" + MovieYear + ")"
		
		try:
			SubLanguage = globals.sublanguages["languages_id_xxx"][subfounded1['SubLanguageID']][1]
		except:
			SubLanguage = "Unknown"
		
		self.dlg = UploadConfirmation.UploadConfirmation(textname,SubLanguage,IDSubtitle,self,-1,_("Subtitle Found..."),  style = wx.DEFAULT_DIALOG_STYLE)
		globals.user_has_uploaded = True
		self.dlg.ShowModal()
		return
	else:
		self.EnableStep_Info(True)
		self.cds_keys = cds_keys
		imdb_id = ""
		self.subs_filepaths = subs_filepaths
		
		self.aviname = ""	
		if os.path.exists(video1_filename):
			basename = os.path.basename(video1_filename)
			self.aviname = basename[:basename.rfind(".")]
			
		#Autodetecting language of the subtitle to upload
		
		if globals.preferences_list["language_upload_autodetect"] and (subs_filepaths["cd1"].endswith("sub") or subs_filepaths["cd1"].endswith("srt") or subs_filepaths["cd1"].endswith("txt")):	
			subtitle_content = file(subs_filepaths["cd1"],mode='rb').read()
			globals.CleanTagsFile(subtitle_content)
			n = autodetect_lang._NGram()
			try:
				l = autodetect_lang.NGram(os.path.join(globals.sourcefolder,'lm'))
				percentage, lang = l.classify(subtitle_content)
				globals.Log("Autodecteded language")
			
				globals.Log("LANG = " + lang)
				globals.Log("percentage = " + str(percentage))
				
				#The language must have a capital letter at the beggining e.g. Spanish, English
				if lang:
					lang = lang[0].upper() + lang[1:]
				if globals.sublanguages["languages_name2xxx"].has_key(lang):
					self.combo_sublanguages.SetStringSelection(lang)
					self.label_autodetect_language.SetLabel("* "+ _("AutoDetected"))
			except:
				globals.Log("Error occurred while autodetecting language")
				
			
			
				
			

		split_path = os.path.split(os.path.dirname(resultcd1["pathvideofilename"]))
		self.text_releasename.SetValue(split_path[-1])
		#Filling out the IMDB info returned.
		if not answer['data'] == False:
			subfounded1 = answer['data'][0]
			IDMovieImdb = subfounded1['IDMovieImdb']
			MovieName = subfounded1['MovieName']
			MovieNameEng = subfounded1['MovieNameEng']
			globals.DownloadCover(IDMovieImdb)
			self.ChoiceIMDB(IDMovieImdb,MovieName,MovieNameEng)
			
			if MovieNameEng:
				textname = "\"" +MovieName  + "\" aka \"" + MovieNameEng + "\"" 
			else:
				textname = "\"" + MovieName + "\"" 
		
		else:
			imdb_id = self.AutoDetectNFOfile(video1_filename)
			if imdb_id:
				
				wx.BeginBusyCursor()
				msg = _("Detected .nfo file, please wait...")
				info = wx.BusyInfo(msg)
				globals.Log(msg)
				try:
					imdb_server =  imdb.IMDb()
					movie = imdb_server.get_movie(imdb_id)
					imdb_id = imdb_server.get_imdbID(movie)
					
					title = movie['long imdb title']
					self.ChoiceIMDB(imdb_id,title,"")
					wx.EndBusyCursor()
	
				except:
					wx.EndBusyCursor()
					error = _("Error retrieving IMDB ID from .NFO file")
					wx.MessageBox(error)
					globals.Log(error)
				
		

   
	
    def ChoiceIMDB(self,IDMovieImdb,MovieName,MovieNameEng):
	find_pos = -1
	
	try:
			a = globals.preferences_list["imdb_list"]
	except:
			globals.preferences_list["imdb_list"] = []
	
	for pos,imdb_key in enumerate(globals.preferences_list["imdb_list"]):
		if imdb_key[0] == IDMovieImdb:
			find_pos = pos
			text_imdb = imdb_key[1]
			break
		
	if find_pos == -1:
		if MovieNameEng:
			textname = "\"" +MovieName + "\" aka \"" + MovieNameEng + "\"" 
		else:
			textname = "\"" + MovieName + "\"" 
			
		text_imdb = IDMovieImdb + ": " + textname
		new_key = [IDMovieImdb,text_imdb]
		if len(globals.preferences_list["imdb_list"]) == 5: #Queue size = 5
			item = globals.preferences_list["imdb_list"].pop()
			self.text_imdb_id.Delete(self.text_imdb_id.FindString(item[1]))
			
		globals.preferences_list["imdb_list"].insert(0,new_key)
		self.text_imdb_id.Insert(new_key[1],0)
	
	self.text_imdb_id.SetStringSelection(text_imdb)
	self.OnChangeImdb(wx.EVT_CHOICE)
    def OnIMDBButton(self,evt):
	    imdb_id = self.text_imdb_id.GetStringSelection()
	    if hasattr("self","aviname"):    
		    if  imdb_id == NO_IMDB_TEXT: 
			    imdb_id = self.aviname
		    else:
			    imdb_id = imdb_id[:imdb_id.find(":")]
		    
	    self.dlg = IMDBSearch.IMDBSearch(self,imdb_id,self,-1,_("IMDB Search"),  style = wx.DEFAULT_DIALOG_STYLE)
	    self.dlg.ShowModal()


    def OnChangeImdb(self,evt):
	imbd_text = self.text_imdb_id.GetStringSelection()
        if imbd_text == NO_IMDB_TEXT: 
            self.EnableStep_Upload(False)
	    self.bitmap_cover.SetBitmap(wx.BitmapFromImage(),self.img_nocover)
	else:
            self.EnableStep_Upload(True)
	    imdb_id = imbd_text[:imbd_text.find(":")]
	    cover_file = os.path.join(globals.sourcefolder,"images","covers",imdb_id + ".gif")
	    if os.path.exists(cover_file):
		    Img = wx.Bitmap(cover_file, wx.BITMAP_TYPE_ANY)
		    self.bitmap_cover.SetBitmap(Img)
			      
        self.Refresh()
	
    def SetText_Imdb(self,imdb_id,title):
	    self.ChoiceIMDB(imdb_id,title,"")

	    
    def OnUploadButton(self,evt):
	    #error = False
	   
	    imdb_text  = self.text_imdb_id.GetStringSelection()
	    imdb_id = imdb_text[:imdb_text.find(":")]
	    languageid = globals.sublanguages["languages_name2xxx"][self.combo_sublanguages.GetValue()]
	    comments = self.text_comments.GetValue()
	    optional1 = self.text_optional1.GetValue()
	    releasename = self.text_releasename.GetValue()
	    
	    if not imdb_id:
		    wx.MessageBox(_("Error: The IMDB ID field is required."))
		    #error = True
		    return
	    
	    
	    cds_upload = {}
	    for cdnumber,cd_value in self.cds_keys.items():
		   cdupload = cd_value
		   md5hex = md5.new(file(self.subs_filepaths[cdnumber],mode='rb').read()).hexdigest()
		   cdupload["subcontent"] = base64.encodestring(zlib.compress(file(self.subs_filepaths[cdnumber],mode='rb').read()))
		   cds_upload[cdnumber] = cdupload
	    
	    comments = comments.replace("'","''")
	    releasename = releasename.replace("'","''")
	    optional1 = optional1.replace("'","''")
	    
	    cds_upload["baseinfo"] = {'idmovieimdb':imdb_id,'moviereleasename':releasename,'movieaka':optional1,'sublanguageid':languageid,'subauthorcomment':comments}
	    
	    self.thread_canceled = False
	    self.SearchKeepGoing = True
    
	    exit = False
	    globals.Log('Uploading...')
	    self.upload_dlg = PP.PyProgress(None, -1, _("Upload Progress"),
                            _("Uploading, it can take a while..."),                            
                            style = wx.PD_CAN_ABORT)
	    self.upload_dlg.CenterOnParent()
	    wx.YieldIfNeeded()
	    lines = ""
	    count = 0
	    go_up = True
	    
	    if globals.debugmode:
		    globals.Log('-------------xmlrpc_server.UploadSubtitles:\n')
		    globals.Log(cds_upload)
	
	    try:
		answer = globals.xmlrpc_server.UploadSubtitles(globals.osdb_token,cds_upload)
		if globals.debugmode:
		    globals.Log("-------------Received:")
		    globals.Log(answer)
		
		self.thread_canceled = True
		if not answer["status"].startswith("4"):
			dlg = wx.MessageDialog(
				None,
				_("Thank you. Subtitle sucessfuly uploaded.") + "\n" + _("Would you like to check the detailed page of the subtitle uploaded?"),
				_("Successful Upload"),
				wx.YES_NO | wx.ICON_QUESTION 
				)
			userChoice = dlg.ShowModal()
			if userChoice == wx.ID_YES:
				try:
					webbrowser.open(answer["data"])
				except:
					msg = _("Error opening link")
					wx.MessageBox(msg + " " + answer["data"])
		else:
			error = _("The server returned some errors")
			error += "\n" +  answer["status"]
			wx.MessageBox(error)
			globals.Log(error)
			
		 #We want to close de dialog
		
	    except:
		error = _("Error Uploading Subtitles in server, possible causes:")
		error += "\n-" + _("The connection with the server is off") + "\n-" + _("Your subtitle name has some special characters you should remove.")
		wx.MessageBox(error)
		globals.Log(error)
		self.thread_canceled = True #We want to close de dialog

	    
	    self.upload_dlg.Destroy()
	    self.EnableStep_Info(False)
	    self.EnableStep_Commit(True)
	    

    def AutoDetectNFOfile(self,pathvideofile):	
	if os.path.isfile(pathvideofile):
		videofolder = os.path.dirname(pathvideofile)
		nfo_found = ""
		
		
		for filename in os.listdir(videofolder):
			if filename.endswith(".nfo"): 
				if not nfo_found : 
					nfo_found = filename
				else: 
					return 0
				

		if nfo_found:
			nfo_content = file(os.path.join(videofolder,nfo_found)).read()
			result = re.search('imdb\.\w+\/title\/tt(\d+)', nfo_content.lower())
			if result:
				found_imdb_id = result.group(1)
				print "Found_IMBD_NFO=" + found_imdb_id
				return  found_imdb_id
			else:
				return 0
			

    def AutoDetectFile(self,pathvideofile,extensions_to_detect):
        #parent = self.parent
	
	if os.path.isfile(pathvideofile):
		videofolder = os.path.dirname(pathvideofile)
		filename1_noextension = globals.DeleteExtension(pathvideofile)
		
		
		#1st METHOD
		for ext in extensions_to_detect:
			possiblefilenamesrt = filename1_noextension + "." + ext
			if os.path.exists(possiblefilenamesrt):
				return possiblefilenamesrt
						
				
		#2nd METHOD FIND THE AVI NAME MERGED INTO THE SUB NAME
		cleaned_file = globals.CleanString(filename1_noextension.lower())
		filesfound = []
		for filename in os.listdir(videofolder):
			for ext in extensions_to_detect:
				if filename.endswith("."+ext):
					filesfound.append(filename)
					cleaned_found = globals.CleanString(globals.DeleteExtension(filename.lower()))
					if "srt" in extensions_to_detect:
						if cleaned_found.find(cleaned_file) != -1:
							return os.path.join(videofolder,filename)
					else:
						if cleaned_file.find(cleaned_found) != -1:
							return os.path.join(videofolder,filename)
					
				
		#3rd METHOD WE TAKE THE SUB IF THERE IS ONLY
		if len(filesfound)== 1:
			return os.path.join(videofolder,filesfound[0])				

	return ""						


    def AutoDetect2ndAVI(self,pathvideofile):

	if os.path.isfile(pathvideofile):
		videofolder = os.path.dirname(pathvideofile)
		lastpointposition = pathvideofile.rfind(".")
		extension = pathvideofile[lastpointposition:]
		filename1 = os.path.basename(pathvideofile)
		
		subfound = ""
		for filename2 in os.listdir(videofolder):
			if filename2.endswith(extension):
				if len(filename2) == len(filename1):
					bad = 0
					counter = ""
					for number,letter in enumerate(filename1[:]):
						if filename2[number] != filename1[number]:
							bad += 1
							counter = number
					if bad == 1:
						if chr(ord(filename1[counter]) + 1) == filename2[counter]:
							#We found a 2nd cd avi
							return os.path.join(videofolder,filename2)
							
	return ""


# end of class PanelUpload


